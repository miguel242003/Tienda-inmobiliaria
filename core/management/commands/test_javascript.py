from django.core.management.base import BaseCommand
from django.test import Client
from propiedades.models import Propiedad


class Command(BaseCommand):
    help = 'Prueba que la funci√≥n showTab est√© disponible en el JavaScript'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üß™ Probando disponibilidad de funci√≥n showTab...'))
        
        # Obtener una propiedad de prueba
        try:
            propiedad = Propiedad.objects.first()
            if not propiedad:
                self.stdout.write(self.style.ERROR('‚ùå No hay propiedades en la base de datos'))
                return
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Error obteniendo propiedad: {e}'))
            return
        
        self.stdout.write(self.style.SUCCESS(f'üìã Usando propiedad: {propiedad.titulo}'))
        
        # Crear cliente de prueba
        client = Client()
        
        # Obtener la p√°gina de detalle
        try:
            response = client.get(f'/propiedades/{propiedad.id}/')
            
            if response.status_code == 200:
                self.stdout.write(self.style.SUCCESS('‚úÖ P√°gina de detalle cargada correctamente'))
                
                # Verificar que la funci√≥n showTab est√© en el contenido
                content = response.content.decode('utf-8')
                
                if 'function showTab(tabName)' in content:
                    self.stdout.write(self.style.SUCCESS('‚úÖ Funci√≥n showTab encontrada en el HTML'))
                else:
                    self.stdout.write(self.style.ERROR('‚ùå Funci√≥n showTab NO encontrada en el HTML'))
                
                if 'data-tab=' in content:
                    self.stdout.write(self.style.SUCCESS('‚úÖ Botones con data-tab encontrados'))
                else:
                    self.stdout.write(self.style.ERROR('‚ùå Botones con data-tab NO encontrados'))
                
                if 'addEventListener(\'click\', function()' in content:
                    self.stdout.write(self.style.SUCCESS('‚úÖ Event listeners para pesta√±as encontrados'))
                else:
                    self.stdout.write(self.style.ERROR('‚ùå Event listeners para pesta√±as NO encontrados'))
                
                # Verificar que no haya errores de sintaxis obvios
                if 'window.onclick = function(event)' in content:
                    count = content.count('window.onclick = function(event)')
                    if count == 1:
                        self.stdout.write(self.style.SUCCESS('‚úÖ Solo una funci√≥n window.onclick encontrada'))
                    else:
                        self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è {count} funciones window.onclick encontradas (puede causar conflictos)'))
                
            else:
                self.stdout.write(self.style.ERROR(f'‚ùå Error cargando p√°gina: {response.status_code}'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Error en la prueba: {e}'))
        
        self.stdout.write(self.style.SUCCESS('üéâ Prueba de JavaScript completada'))
